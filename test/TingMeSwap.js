const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
describe("TingMeSwap", function () {
  const TYPE_SWAP_REMOTE = 1;
  let impersonatedZeroSigner, Swap, provider, swap;
  const erc20Abi =
    require("../artifacts/contracts/interfaces/IERC20.sol/IERC20.json")["abi"];
  const stgAbi =
    require("../artifacts/contracts/interfaces/IStargateRouter.sol/IStargateRouter.json")[
      "abi"
    ];
  let swapAddress = "0x4e518f6fbf8ee88c82552e76d371b4ab60cc8c74";

  this.beforeEach(async () => {
    impersonatedZeroSigner = await ethers.getImpersonatedSigner(
      "0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8"
    );
    Swap = await ethers.getContractFactory("TingMeSwap");
    provider = ethers.provider;
    swap = await Swap.connect(impersonatedZeroSigner).deploy(
      "0x1111111254eeb25477b68fb85ed929f73a960582",
      "0x8731d54E9D02c286767d56ac03e8037C07e01e98",
      0,
      "0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8"
    );
    tx = await swap.deployed();
    // console.log("contract address:", tx.address);
    swapAddress = tx.address;
    await swap
      .connect(impersonatedZeroSigner)
      .changePoolToken(1, "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48");
  });

  it("Should impersonate successfully", async () => {
    const impersonatedZeroSigner = await ethers.getImpersonatedSigner(
      "0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8"
    );
    const balance = await provider.getBalance(impersonatedZeroSigner.address);
    console.log(balance);
  });
  it("Should deploy successfully", async () => {
    console.log(swap.address);
  });
  it("Should swap sucessfully", async () => {
    const stgEthereumContract = new ethers.Contract(
      "0x8731d54E9D02c286767d56ac03e8037C07e01e98",
      stgAbi,
      impersonatedZeroSigner
    );
    const fee = await stgEthereumContract.quoteLayerZeroFee(
      "102",
      "3",
      "0x0000000000000000000000000000000000000000",
      ethers.utils.defaultAbiCoder.encode(
        ["address", "uint8", "bytes"],
        [
          "0x0000000000000000000000000000000000000000",
          0,
          "0x12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000004e518f6fbf8ee88c82552e76d371b4ab60cc8c74000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000f54b6a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd0000000000000000000000000000000000000000000000af00002000000600206b4be0b94041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db00c20c02aaa39b223fe8d0a0e5c4f27ead9083c756cc23926a168c11a816e10c13977f75f488bfffe88e46ae4071138003d09003926a168c11a816e10c13977f75f488bfffe88e41111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000000001c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000cfee7c08",
        ]
      ),
      {
        dstGasForCall: 300000,
        dstNativeAmount: 0,
        dstNativeAddr: "0x",
      }
    );
    console.log("destination swapfee", fee);
    const tx = await swap.connect(impersonatedZeroSigner).swapCrosschain(
      {
        poolId: 1,
        slippage: "10000",
        amountIn: "10000000000000000",
        fee: fee[0],
      },
      {
        poolId: 2,
        chainId: 102,
        slippage: "10000",
        dstFee: 300000,
        dstContract: "0x0000000000000000000000000000000000000000",
        to: "0x0000000000000000000000000000000000000000",
      },
      "0x12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000004e518f6fbf8ee88c82552e76d371b4ab60cc8c74000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000f54b6a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd0000000000000000000000000000000000000000000000af00002000000600206b4be0b94041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db00c20c02aaa39b223fe8d0a0e5c4f27ead9083c756cc23926a168c11a816e10c13977f75f488bfffe88e46ae4071138003d09003926a168c11a816e10c13977f75f488bfffe88e41111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000000001c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000cfee7c08",
      "0x12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e00000000000000000000000004e518f6fbf8ee88c82552e76d371b4ab60cc8c74000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000000000f54b6a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cd0000000000000000000000000000000000000000000000af00002000000600206b4be0b94041c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2d0e30db00c20c02aaa39b223fe8d0a0e5c4f27ead9083c756cc23926a168c11a816e10c13977f75f488bfffe88e46ae4071138003d09003926a168c11a816e10c13977f75f488bfffe88e41111111254eeb25477b68fb85ed929f73a9605820000000000000000000000000000000000000000000000000000000000000001c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000cfee7c08",
      { value: ethers.BigNumber.from("10000000000000000").add(fee[0]) }
    );
    txdone = await tx.wait();
    // console.log(txdone);
  });
  it("should receive successfully", async () => {
    topUSDCHolderSigner = await ethers.getImpersonatedSigner(
      "0xF977814e90dA44bFA03b6295A0616a897441aceC"
    );

    // transfer USDC to contract
    const usdcContract = new ethers.Contract(
      "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
      erc20Abi,
      topUSDCHolderSigner
    );
    console.log(
      "top holder balance:",
      await usdcContract
        .connect(topUSDCHolderSigner)
        .balanceOf("0xF977814e90dA44bFA03b6295A0616a897441aceC")
    );
    await (
      await usdcContract
        .connect(topUSDCHolderSigner)
        .transfer(swapAddress, "100000000000")
    ).wait();
    console.log(
      "contract usdc balance:",
      await usdcContract.connect(topUSDCHolderSigner).balanceOf(swapAddress)
    );
    await swap
      .connect(impersonatedZeroSigner)
      .sgReceive(
        "102",
        "0x",
        1,
        "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "1000000000",
        ethers.utils.defaultAbiCoder.encode(
          ["address", "uint32", "bytes"],
          [
            "0xBE0eB53F46cd790Cd13851d5EFf43D12404d33E8",
            "10000",
            "0x12aa3caf0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000007122db0ebe4eb9b434a9f2ffe6760bc03bfbd0e0000000000000000000000000be0eb53f46cd790cd13851d5eff43d12404d33e8000000000000000000000000000000000000000000000000000000003b9aca0000000000000000000000000000000000000000000000000008500eb0a70f702a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d90000000000000000000000000000000000000000bb0000a500006900001a0020d6bdbf78a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4802a00000000000000000000000000000000000000000000000000000000000000001ee63c1e50188e6a0c2ddd26feeb64f039a2c41296fcb3f5640a0b86991c6218b36c1d19d4a2e9eb0ce3606eb484101c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200042e1a7d4d0000000000000000000000000000000000000000000000000000000000000000c0611111111254eeb25477b68fb85ed929f73a96058200000000000000cfee7c08",
          ]
        )
      );
  });
});
